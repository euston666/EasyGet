/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import download.*;
import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author Goal2sCool
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        tableModel = (DefaultTableModel)jTable1.getModel(); //设置jtable第四列为进度条
        TableColumn progressColumn = jTable1.getColumnModel().getColumn(3);
        progressColumn.setCellRenderer(new ProgressBarRenderer());
        
        loadTasks(); //加载历史记录
        taskID = taskVector.size(); //初始化taskID，使其指向表尾
        this.setLocationRelativeTo(null); //居中显示
        new TaskBackup(this); //启动任务备份线程
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("多线程下载工具");
        setBackground(new java.awt.Color(232, 232, 232));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setForeground(new java.awt.Color(232, 232, 232));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(230, 230, 230));

        jScrollPane1.getViewport().setBackground(Color.WHITE);

        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(204, 204, 204)));
        jTable1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "任务状态", "文件名", "文件大小", "下载进度", "下载速度"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jTable1.setSelectionBackground(new java.awt.Color(0, 153, 255));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(222, 222, 222));
        jButton1.setFont(new java.awt.Font("微软雅黑", 1, 24)); // NOI18N
        jButton1.setText("添加任务");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(222, 222, 222));
        jButton2.setFont(new java.awt.Font("微软雅黑", 1, 16)); // NOI18N
        jButton2.setText("开始");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(222, 222, 222));
        jButton3.setFont(new java.awt.Font("微软雅黑", 1, 16)); // NOI18N
        jButton3.setText("暂停");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(222, 222, 222));
        jButton4.setFont(new java.awt.Font("微软雅黑", 1, 16)); // NOI18N
        jButton4.setText("移除");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(222, 222, 222));
        jButton5.setFont(new java.awt.Font("微软雅黑", 1, 16)); // NOI18N
        jButton5.setText("全部开始");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(222, 222, 222));
        jButton6.setFont(new java.awt.Font("微软雅黑", 1, 16)); // NOI18N
        jButton6.setText("全部暂停");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(222, 222, 222));
        jButton7.setFont(new java.awt.Font("微软雅黑", 1, 16)); // NOI18N
        jButton7.setText("清空任务");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jTextArea1.setRows(20);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(204, 204, 204)));
        jScrollPane2.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
                    .add(jScrollPane2))
                .add(0, 0, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(51, 51, 51)
                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton7)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 325, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(86, 86, 86))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 665, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        NewTask nt = new NewTask(this);
        nt.setLocationRelativeTo(this);
        nt.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        //“开始”
        int row = jTable1.getSelectedRow();
        if(row!=-1){ //非空行
            TaskInfo task_restart = (TaskInfo)taskVector.get(row); //获取选定行对应的任务
            if(task_restart.getStatus().equals("完成")||task_restart.getStatus().equals("进行中")){
            }
            else{
                if(!isfileExist(task_restart.getSaveFilePath())&&task_restart.getThreadNum()!=0){ //无响应的任务没有本地文件，故不提示
                    JOptionPane.showMessageDialog(this,"本地文件丢失，任务将会重新下载！");
                    redownByThree(task_restart, row);
                    return;
                }
                if(task_restart.getStatus().equals("暂停")){
                    task_restart.setStopped(false);
                    tableModel.removeRow(row);
                    new Downloader(task_restart, this).download();
                }
                if(task_restart.getStatus().equals("无响应")){ //使用三个线程下载
                    redownByThree(task_restart, row);
                }
                if(task_restart.getStatus().equals("错误")){ //使用单线程下载
                    redownByOne(task_restart, row);
                }
            }
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        //“暂停”
        int row_num = jTable1.getSelectedRow();
        if(row_num!=-1){
            TaskInfo task_tostop = (TaskInfo)taskVector.get(row_num); //获取选定行所对应的下载任务
            if(task_tostop.getStatus().equals("进行中")){
                task_tostop.setStopped(true);
            }
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        //“移除”
        int row_num = jTable1.getSelectedRow();
        if(row_num!=-1){
            TaskInfo taskRemove = (TaskInfo)taskVector.get(row_num);
            int choice = JOptionPane.showConfirmDialog(this, "该任务及其本地文件将被删除，是否继续？");
            if(choice==JOptionPane.OK_OPTION){
                if(!(taskRemove.getStatus().equals("无响应"))){
                    taskRemove.setValidate(false); // 终止任务的监听器
                    taskRemove.setStopped(true); //终止任务的所有下载线程
                    while(!deleteFile(taskRemove.getSaveFilePath())){ //直至删除为止
                    }
                }
                tableModel.removeRow(row_num); //从表格中删除
                jTable1.repaint();
                taskVector.remove(row_num); //从历史记录中删除
                for(int i=row_num; i<taskVector.size(); i++){ //使后序任务的序号减1
                    TaskInfo tmpInfo = (TaskInfo)taskVector.get(i);
                    tmpInfo.setTaskID(tmpInfo.getTaskID()-1);
                }
                setTaskID(taskVector.size()); //调整任务号，新的任务号指向集合的末尾
                jTextArea1.setText("");
            }
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        jTextArea1.setText(""); //清空
        if(jTable1.getSelectedRow()!=-1){ //非空行
            String taskStatus = (String)jTable1.getValueAt(jTable1.getSelectedRow(), 0);
            if(taskStatus.equals("完成")||taskStatus.equals("进行中")){
                jButton2.setEnabled(false);
            }
            else{
                jButton2.setEnabled(true);
            }
            if(taskStatus.equals("进行中")){
                jButton3.setEnabled(true);
            }
            else{
                jButton3.setEnabled(false);
            }
            jButton4.setEnabled(true);
            
            //textarea显示连接信息
            TaskInfo tmp_taskInfo = (TaskInfo)taskVector.get(jTable1.getSelectedRow());
            Vector tmp_printVector = tmp_taskInfo.getPrintVector(); //获取并打印消息集合
            for(int i=0; i<tmp_printVector.size(); i++){
                jTextArea1.append((String)tmp_printVector.get(i)+"\n");
            }
            
            //textarea显示资源MIME信息
            if(!taskStatus.equals("无响应")){ //无响应的任务没有存储MIME信息
                jTextArea1.append("=====================资源MIME信息======================="+"\n");
                HashMap<String, String> tmp_MIME = tmp_taskInfo.getHTTPMIME();
                Set<String> keys = tmp_MIME.keySet();
                for(String key: keys) {
                    jTextArea1.append(key+":"+tmp_MIME.get(key)+"\n");
                }
                jTextArea1.append("======================================================"+"\n");
            }
        }
        else{ //空行
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        //“全部开始”
        boolean flag = false; //列表中存在某些任务的本地文件损坏，则flag=true
        for(int i=0; i<jTable1.getRowCount(); i++){
            TaskInfo task_restart = (TaskInfo)taskVector.get(i); //获取选定行对应的任务
            if(task_restart.getStatus().equals("完成")||task_restart.getStatus().equals("进行中")){
            }
            else{
                if(!isfileExist(task_restart.getSaveFilePath())&&task_restart.getThreadNum()!=0){ //无响应的任务没有本地文件，故不提示
                    flag = true;
                    continue;
                }
                if(task_restart.getStatus().equals("暂停")){
                    task_restart.setStopped(false);
                    tableModel.removeRow(i);
                    new Downloader(task_restart, this).download();
                }
                if(task_restart.getStatus().equals("无响应")){ //使用三个线程下载
                    redownByThree(task_restart, i);
                }
                if(task_restart.getStatus().equals("错误")){ //使用单线程下载
                    redownByOne(task_restart, i);
                }
            }
        }
        if(flag){
            JOptionPane.showMessageDialog(this,"部分任务的本地文件损坏，请单独启动这些任务！");
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        //“全部暂停”
        for(int i=0; i<jTable1.getRowCount(); i++){
            TaskInfo task_tostop = (TaskInfo)taskVector.get(i); //获取选定行所对应的下载任务
            if(task_tostop.getStatus().equals("进行中")){
                task_tostop.setStopped(true);
            }
        }
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        //“清空列表”
        int choice = JOptionPane.showConfirmDialog(this, "列表中的所有任务及其本地文件将被删除，是否继续？");
        if(choice==JOptionPane.OK_OPTION){
            for(int i=0; i<taskVector.size(); i++){ //终止任务的所有线程
                TaskInfo taskRemove = (TaskInfo)taskVector.get(i);
                if(taskRemove.getStatus().equals("无响应")) continue;
                taskRemove.setValidate(false);
                taskRemove.setStopped(true);
                while(!deleteFile(taskRemove.getSaveFilePath())){ //直至删除为止
                }
            }
            while(jTable1.getRowCount()>0){ //清空列表
                tableModel.removeRow(0); 
            }
            taskVector.clear(); //清空任务集合
            setTaskID(taskVector.size()); //调整任务号
            jTextArea1.setText("");
        }
    }//GEN-LAST:event_jButton7MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    public void loadTasks(){
        File tasksBackup1 = new File("."+File.separator+"tasksBackup1");
        File tasksBackup2 = new File("."+File.separator+"tasksBackup2");
        if(tasksBackup1.exists()||tasksBackup2.exists()){
            ObjectInputStream ois1 = null;
            ObjectInputStream ois2 = null;
            try{
                ois1 = new ObjectInputStream(new FileInputStream(tasksBackup1));
                taskVector = (Vector)(ois1.readObject());
                ois1.close();
                for(int i=0; i<taskVector.size(); i++){
                    addItemToTable((TaskInfo)taskVector.get(i));
                }
            }
            catch(Exception e1){
                try{
                    ois2 = new ObjectInputStream(new FileInputStream(tasksBackup2));
                    taskVector = (Vector)(ois2.readObject());
                    ois2.close();
                    for(int i=0; i<taskVector.size(); i++){
                        addItemToTable((TaskInfo)taskVector.get(i));
                    }
                }
                catch(Exception e2){ //加载两个备份都失败
                    JOptionPane.showMessageDialog(this, "加载历史记录出错！");
                    return;
                }
            }
            finally{
                try{
                    ois1.close();
                    ois2.close();
                }
                catch(Exception e){
                }
            }
        }
        else{
            taskVector = new Vector();
        }
    }
    
    public void addItemToTable(TaskInfo taskInfo){
        Vector tmp_vector = new Vector();
        if(taskInfo.getStatus().equals("进行中")){ //“进行中”的任务变为“暂停”
            taskInfo.setStopped(true);
            tmp_vector.add(new String("暂停"));
        }
        else{
            tmp_vector.add(taskInfo.getStatus());
        }
        tmp_vector.add(taskInfo.getSaveFilePath().substring(taskInfo.getSaveFilePath().lastIndexOf(File.separator)+1));
        tmp_vector.add(taskInfo.getFileLength());
        tmp_vector.add(taskInfo.getDownProgress());
        tmp_vector.add(taskInfo.getDownSpeed()+"KB/s");
        tableModel.addRow(tmp_vector);
        jTable1.repaint();
    }
    
    private boolean isfileExist(String fileSavePath){
        File tmp_file = new File(fileSavePath);
        boolean exist = false;
        if(tmp_file.exists()){
            exist = true;
        }
        return exist;
    }
    
    private boolean deleteFile(String fileSavePath){ 
        File file_todelete = new File(fileSavePath);
        boolean result = false;
        int tryCount = 0;
        if(file_todelete.exists()){
            while(!result && tryCount++ <10){
                System.gc();
                result = file_todelete.delete();
            }
        }
        return result;
    }
    
    private void redownByOne(TaskInfo task, int row){
        TaskInfo task_redown = new TaskInfo(task.getTaskURL(), task.getSaveFilePath(), 1, row);
        taskVector.setElementAt(task_redown, row); //替换原来的任务
        tableModel.removeRow(row);
        new Downloader(task_redown, this).download();
    }
    
    private void redownByThree(TaskInfo task, int row){
        TaskInfo task_redown = new TaskInfo(task.getTaskURL(), task.getSaveFilePath(), 3, row);
        taskVector.setElementAt(task_redown, row); //替换原来的任务
        tableModel.removeRow(row);
        new Downloader(task_redown, this).download();
    }
    
    public void addTaskToVector(TaskInfo tmpInfo){
        taskVector.add(tmpInfo);
    }
    
    public JTable getTable(){
        return jTable1;
    }
    
    public DefaultTableModel getTableModel(){
        return tableModel;
    }
    
    public int getTaskID(){
        return taskID++;
    }
    
    public void setTaskID(int taskID){
        this.taskID = taskID;
    }
    
    public Vector getTaskVector(){
        return taskVector;
    }
    
    private int taskID;
    private Vector taskVector;
    private DefaultTableModel tableModel; 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}

class ProgressBarRenderer extends DefaultTableCellRenderer{ 
    private final JProgressBar b;  
    public ProgressBarRenderer(){  
        super();  
       
        b = new JProgressBar(); 
        b.setForeground(Color.black);
        b.setStringPainted(true);  
        b.setMinimum(0);  
        b.setMaximum(100); 
        b.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 3)); 
        b.setBorderPainted(true);
    }  
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {  
        if(value!=null){ 
            b.setValue((Integer)value);  
        }
        return b;
    }  
}  

